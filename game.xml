<?xml version="1.0"?>

<game>


   <!-- This section MUST come first.  The manifest declares the names and types
        of all entities in the game.  If a game entity is defined below but is
        not declared here first, the engine will throw an error.  All entities
        declared in the manifest must be defined below.  If an entity is
        declared in this section and is not defined below, the engine will throw
        an error.

         Note that each item, regardless of type, must have a unique name.
         A room and an object, for example, cannot both be named the same thing.
         If two or more objects need to be identified by the same word, you can
         define aliases for them in the entity definitions.
   -->
   <manifest>

      <!-- every game must include at least one room named "start" -->
      <rooms>
         <room name="start"></room>
         <room name="cave"></room>
         <room name="chamber"></room>
      </rooms>

      <creatures>
         <creature name="trogdor"></creature>
         <creature name="casper"></creature>
      </creatures>

      <objects>
         <object name="candle"></object>
         <object name="stick"></object>
         <object name="rock"></object>
         <object name="boulder"></object>
         <object name="sword"></object>
      </objects>

   </manifest>



   <!-- The meta section is optional and defines any meta data variables you
        want to set in the game.  All values are stored internally as
        strings. -->
   <meta>

      <!-- Meta data is represented by key/value pairs.  The tag name can be
           anything as long as it's properly terminated. -->
      <title>Super Funtime Sample Game</title>
      <author>James Colannino</author>

   </meta>



   <!-- Global Event Handlers and Scripts (optional) -->
   <events>

      <!-- identifies one or more external scripts containing event handling
           functions -->
      <script src="script/global1.lua"></script>

      <!-- you can also place scripts inline -->
      <script>

         -- just a placeholder for demo purposes
         function testFunctionDrop(player, entity)

            -- first value decides if we should continue executing event handlers
            -- second value decides if we should execute the action that
            -- triggered the event
            return true, true

         end

      </script>

      <!-- identifies a script function to call for a given event -->
      <event name="beforeDrop">sampleDropObject</event>
      <event name="beforeDrop">testFunctionDrop</event>

   </events>



   <!-- Player Configuration -->
   <player>

      <!-- configuration for the default player -->
      <default>

         <!-- configuration options related to the player's inventory -->
         <inventory>

            <!-- Determines the maximum weight of the inventory.  0 means the
                 inventory has unlimited size.  Any integer greater than 0
                 determines the inventory's maximum capacity (consider this the
                 sum total of all object weights.)  For example, if object
                 "candle" is defined with a weight of 2, and object "sword" is
                 defined with a weight of 10, and the inventory weight is
                 defined to be 11, you can then hold either the candle or the
                 sword, but not both.  What integers you choose to use are
                 totally up to you and are completely subjective.
            -->
            <weight>0</weight>

         </inventory>

         <!-- messages for various events are defined here (pre-defined for the
              engine or custom for scripts)
         -->
         <messages>
            <message name="respawn">A bolt of lightening claps, and your dead body bursts to life in a brilliant flash.</message>
         </messages>

         <!-- By default, player attributes are distributed evenly (10 given to
              each attribute.)  Here, you can optionally set your own values, which
              will be assigned by default to all new players. -->
         <attributes>
            <strength>10</strength>
            <dexterity>10</dexterity>
            <intelligence>10</intelligence>
         </attributes>

         <!-- settings governing player's ability to respawn when killed.  This
              section is optional, and if it doesn't exist, default behavior is
              for respawn to be disabled. -->
         <respawn>

            <!-- 0 = false and 1 = true.  If enabled, the player will come back
                 to life after being killed.  Default is 0 for false.  -->
            <enabled>1</enabled>

            <!-- Number of clock ticks (seconds) to wait before player respawns.
                 If set to 0, player will respawn immediately. (optional:
                 default = 0.) -->
            <interval>5</interval>

            <!-- Number of times the player can respawn before dying
                 permanently.  If set to -1, player can respawn an unlimited
                 number of times.  (optional: default = -1.) -->
            <lives>-1</lives>

         </respawn>

         <!-- whether or not player starts out alive or dead (optional:
              default is 1 for alive) -->
         <alive>1</alive>

         <!-- default starting health (optional: default is 0) -->
         <health>10</health>

         <!-- a max health of 0 means the creature is immortal (optional:
              default is 0 for immortal) -->
         <maxHealth>10</maxHealth>

         <!-- default maximum probability of being hit during combat
              (optional: default is 0.5) -->
         <woundrate>0.5</woundrate>

         <!-- whether or not players, by default, are attackable.  By default,
              players are attackable -->
         <attackable>1</attackable>

         <!-- this number, when multiplied by the player's strength factor
              (strength points / total attribute points) and rounded to the
              nearest whole number, represents the amount of damage the player
              does with his bare hands (optional: default is 3) -->
         <damagebarehands>5</damagebarehands>

      </default>

   </player>



   <!-- Game Objects -->
   <objects>

      <object name="candle">
         <!-- The user will see this description the first time they encounter the
              object, or everytime they issue the command "look at candle."
         -->
         <description>
It appears to be a firey cylinder of wax burning with the passion of a thousand suns.
         </description>

         <!-- specifies an object's weight; not specifying this will default to
              0, which means it has no weight. -->
         <weight>1</weight>

         <messages>
            <message name="take">The candle jumps up into the air, does a backflip and turns into a spoon.</message>
            <message name="drop">You hesitate before dropping that awesome waxy goodness.</message>
         </messages>

         <!-- define object's event handlers and attached scripts here -->
         <events>
            <!-- one or more scripts can be attached to an object, which define
                 functions that get triggered by the event handler -->
            <script src="script/object/candle.lua"></script>

            <!-- Specific events that trigger functions in the script files
                 above. -->
            <event name="beforeTake">beforeTakeCandle</event>
            <event name="beforeDrop">beforeDropCandle</event>
         </events>

         <!-- If the object should be identifiable by words other than the name,
              define those words here. -->
         <aliases>
            <alias>fire</alias>
            <alias>flame</alias>
         </aliases>

      </object>

      <!-- owned by Trogdor the Burninator -->
      <object name="stick">
         <description>It's long, narrow and definitely looks like a stick.</description>
         <weight>1</weight>
      </object>

      <object name="rock">

         <description>
It's nothing special.  It's gray, bumpy and a little lopsided.
         </description>

         <!-- this optional tag allows you to turn off the ability for the
              player to drop an object.  An object is droppable by default (you
              can achieve the same effect manually by setting this to 1.) -->
         <droppable>0</droppable>

         <aliases>
            <alias>stone</alias>
         </aliases>

      </object>

      <object name="boulder">

         <description>
It's a huge rock.  You're not sure if you'll be able to lift it.
         </description>
         <weight>1</weight>

         <!-- This optional tag allows you to turn off the player's ability to
              take an object.  An object is takeable by default (you can
              achieve the same effect manually by setting this to 1.)-->
         <takeable>0</takeable>

         <aliases>
            <alias>rock</alias>
            <alias>stone</alias>
         </aliases>

      </object>

      <object name="sword">

         <!-- By default, an object's title is "a <object name>", and is shown
              whenever a player sees an object.  This title can be overridden
              with a <title> tag.  When a player sees the object, they will
              read "You see <object's title>. -->
         <title>the Sword of Hope</title>

         <description>
A smooth metallic sheen covers its surface, which looks to be of recent make and in good repair.
         </description>

         <!-- If set to 1, the object is a weapon (optional: default 0) -->
         <weapon>1</weapon>

         <!-- Amount of damage object does as a weapon (optional: default 1) -->
         <damage>10</damage>

      </object>

   </objects>



   <!-- Creatures -->
   <creatures>

      <!-- NOTE: a respawn section can also go here if you want your creature
           to respawn.  This section is identical to the one in the default
           player configuration, so you would do well to look there for an
           example ;) -->
      <creature name="trogdor">

         <title>Trogdor the Burninator</title>

         <description>
            He stands 8 feet tall and breathes fire from his nostrils.
         </description>

         <allegiance>enemy</allegiance>

         <!-- even if a creature is an enemy, we may or may not be allowed to
              attack it (optional) -->
         <attackable>1</attackable>

         <!-- whether or not the creature will return each attack against it
              with one of its own.  (optional: default is 1 for true) -->
         <counterattack>1</counterattack>

         <!-- This section is completely optional.  If this section is present,
              and enabled is set to 1, then the creature will automatically
              attack players and other creatures when they enter the room.
              The default setting is for autoattack to be completely disabled. -->
         <autoattack>

            <!-- determines whether or not autoattack should be enabled for this
                 creature (default: 0 for false) -->
            <enabled>1</enabled>

            <!-- how many ticks of the clock (currently seconds) to wait before
                 the creature makes its first attack, and how many ticks of the
                 clock should pass between each attack.  (optional: default 5) -->
            <interval>3</interval>

            <!-- If set to 0 for false, then the creature will only attack once.
                 If set to 1 for true, then the creature will continue attacking
                 with interval number of clock ticks between (specified above)
                 until either one of the creatures or players is dead, or until
                 the two are no longer in the same room. (optional: default 0) -->
            <repeat>1</repeat>

         </autoattack>

         

         <!-- creature's maximum probability of being hit during combat
              (optional: default is 0.5) -->
         <woundrate>0.35</woundrate>

         <!-- this number, when multiplied by the creature's strength factor
              (strength points / total attribute points) and rounded to the
              nearest whole number, represents the amount of damage the player
              does with his bare hands (optional: default is 3) -->
         <damagebarehands>10</damagebarehands>

         <!-- whether or not creature starts out alive or dead (optional:
              default is 1 for alive) -->
         <alive>1</alive>

         <!-- default starting health (optional: default is 0) -->
         <health>20</health>

         <!-- a max health of 0 means the creature is immortal (optional:
              default is 0 for immortal) -->
         <maxHealth>25</maxHealth>

         <!-- Creatures can also be given attributes that affect their behavior
              (by default, creatures are given an even spread of 10 points
              each.)  This setting is optional. -->
         <attributes>
            <strength>10</strength>
            <dexterity>10</dexterity>
            <intelligence>10</intelligence>
         </attributes>

         <inventory>

            <!-- Like the player configuration, a creature can have an inventory
                 of a predefined size. 0 means an inventory of unlimited size. -->
            <weight>0</weight>

            <!-- objects can be placed in a creature's inventory -->
            <object>stick</object>

         </inventory>

         <messages>
            <message name="descshort_dead">Trogdor is very much dead.</message>
            <message name="description_dead">The body of Trogdor lies crumbled on the floor, lifeless and very much dead, in the fullest sense.  This is a long and wordy description of Trogdor's body, isn't it!</message>
         </messages>

      </creature>


      <creature name="casper">

         <title>Casper the Friendly Ghost</title>

         <description>
He's white, transparent and floating six or seven feet off the ground.  He smiles and winks when you look up at him, clearly letting you know he means no harm.
         </description>

         <alive>1</alive>

         <allegiance>friend</allegiance>

         <!-- optional settings to configure a creature's ability to wander from
              room to room.  This is disabled by default. -->
         <wandering>

            <!-- Whether or not to enable wandering.  0 for false by default. -->
            <enabled>1</enabled>

            <!-- how many clock ticks should pass before the creature considers
                 wandering to another room.  Default is 10. Note that the
                 creature may or may not actually move.  This will be determined
                 by the next setting, wanderlust. -->
            <interval>10</interval>

            <!-- Wanderlust is the probability that a creature will actually
                 move when it considers wandering to another room.  This value
                 must be a valid probability between 0 (never moves) and 1
                 (always moves.)  Default is 0.5, which means the creature
                 should choose to actually move roughly half the time. -->
            <wanderlust>0.5</wanderlust>

         </wandering>

         <aliases>
            <alias>ghost</alias>
            <alias>spirit</alias>
            <alias>specter</alias>
            <alias>spectre</alias>
            <alias>phantom</alias>
         </aliases>

      </creature>


   </creatures>



   <!-- Rooms -->
   <rooms>

      <!-- every room MUST HAVE a UNIQUE name.  One room MUST have the name
           "start," which is where the player will start when the game begins.
       -->
      <room name="start">

         <!-- user will see the room's title above its description -->
         <title>The Palace</title>

         <!-- user will see the room's description when they enter -->
         <description>
You're standing in the middle of a sprawling white marble castle, the walls lined with portraits of long deceased ancestors of some forgotten king.  Servants are bustling about, rushing around with steaming plates of meats and cooked vegetables, rushing in and out of rooms to serve princes and heads of state.

You peer off into the distance and notice a dark hole in the wall a little ways to the north.
         </description>

         <!-- name of the room north of this one -->
         <north>cave</north>

         <events>
            <script src="script/room/start.lua"></script>
            <event name="beforeObserve">beforeRoomSample</event>
         </events>

         <!-- you can define transition messages when you come to or go from
              specific directions (two possible messages for each direction) -->
         <messages>
            <!-- we're LEAVING this room by going north -->
            <message name="gonorth">Transitioning to the cave!</message>
            <!-- we're ENTERING this room by going south from another room -->
            <message name="entersouth">Back to start from the cave!</message>
         </messages>

         <!-- Creatures and objects that are contained inside a room should be
              referenced here. Note that the order in which they are placed will
              determine the order in which they are displayed. -->
         <contains>
            <!-- Note that an object cannot be in more than one room. -->
            <object>candle</object>
            <object>sword</object>
         </contains>

      </room>

      <room name="cave">

         <title>The Cave</title>

         <description>
You're in a dark musty cave.  You see a light some ways off to the south.  To the west, you spy a large dark chamber of some sort.
         </description>

         <!-- Since this room is north of "start," start is south of here.  You
              can specify one way movements by not placing this line here (maybe,
              for example, the user got shut behind a trap door?)
         -->
         <west>chamber</west>
         <south>start</south>

         <contains>
            <creature>casper</creature>
         </contains>

      </room>

      <room name="chamber">

         <title>Dark Chamber</title>

         <description>
You find yourself in a dark secluded chamber.  It's dank, musty and generally icky poo-pooos.  Be careful.  There may be nasty things waiting for you here!
         </description>

         <!-- The room's short description, which the player sees everytime
              they enter the room after the first time -->
         <short>It's dark.  Careful!</short>

         <east>cave</east>

         <contains>
            <creature>trogdor</creature>
            <object>rock</object>
            <object>boulder</object>
         </contains>

      </room>

   </rooms>


</game>

