<?xml version="1.0"?>

<game>


   <!-- Entity class definitions are optional. If they are used, they must
        precede the definitions of the rooms, creatures, and objects that use
        them. Otherwise, an Entity class undefined error will be thrown during
        parsing.

        Entity classes are a way to quickly define game Entities that are
        similar. You define a set of attributes for a class, and then any Entity
        whose type is that class will assume those attributes.

        Attributes can be overridden in a specific Entity. So, if you define an
        object class of type "weapon," and you assign to it a damage of 1, but
        then create a specific object of that class and assign to it a damage of
        10, the value of 10 will be used. -->
   <classes>

      <objects>

         <!-- Any defined objects of type "weapon" will assume these attributes. -->
         <weapon>

            <!-- One or more arbitrary tags can be applied to an Entity. A few,
                 such as "weapon" (objects only) are used to define an Entity's
                 properties. -->
            <tags>
               <!-- Any object with this tag can be used to attack other players
                    or creatures in the game -->
               <tag>weapon</tag>
            </tags>

            <!-- Amount of damage object does as a weapon (optional: default 1) -->
            <damage>1</damage>

         </weapon>

      </objects>

      <creatures>

         <soul>

            <!-- any creature of this type can be referenced by these aliases -->
            <aliases>
               <alias>ghost</alias>
               <alias>spirit</alias>
               <alias>specter</alias>
               <alias>spectre</alias>
               <alias>phantom</alias>
            </aliases>

         </soul>

      </creatures>

   </classes>


   <!-- This section is optional, and defines whether or not new players should
        have to read an introduction before starting the game. -->
   <introduction>

      <!-- Whether or not new players should see an introduction before being
           inserted into the game. By default, this setting is disabled. -->
      <enabled>1</enabled>

      <!-- If an introduction is enabled, this is the text that the new player
           will have to read before starting the game. -->
      <text>
This is an introduction. If introductions are enabled, new players will have to read this before being placed into the game.
      </text>

   </introduction>


   <!-- The meta section is optional and defines any meta data variables you
        want to set in the game.  All values are stored internally as
        strings. -->
   <meta>

      <!-- Meta data is represented by key/value pairs.  The tag name can be
           anything as long as it's valid XML and properly terminated. -->
      <title>Super Funtime Sample Game</title>
      <author>James Colannino</author>

   </meta>


   <!-- Optional section that allows you to modify the game's vocabulary -->
   <vocabulary>

      <!-- Allows you to define custom directions. Built-in directions include
           north, south, east, west, northeast, northwest, southeast, southwest,
           up, down, inside, and outside -->
      <directions>

         <!-- Defines a whimsical direction called "sideways." With this, we
              can define room connections below using this custom direction. -->
         <direction>sideways</direction>

      </directions>

      <!-- Map new words to existing verbs. Synonyms cannot be defined if they
           already exist as verbs, so if you specify, for example, "take" as a
           synonym of "drop," you'll get an error. It is okay (though pointless)
           to redefine an existing synonym. -->
      <synonyms>

         <!-- this example maps the new word "steal" to the existing verb
              "take." -->
         <verb verb="take">steal</verb>

         <!-- this example maps the new synonym "sideway" to the direction
              "sideways," which we defined above. Note that this synonym must
              either be for a built-in direction or appear AFTER a custom
              direction's definition. -->
         <direction direction="sideways">sideway</direction>

      </synonyms>

   </vocabulary>


   <!-- Global Event Handlers and Scripts (optional) -->
   <events>

      <!-- identifies one or more external scripts containing event handling
           functions -->
      <script src="script/global1.lua"></script>

      <!-- you can also place scripts inline -->
      <script>

         -- just a placeholder for demo purposes
         function testFunctionDrop(player, entity)

            -- first value decides if we should continue executing event handlers
            -- second value decides if we should execute the action that
            -- triggered the event
            return true, true

         end

      </script>

      <!-- identifies a script function to call for a given event -->
      <event name="beforeDrop">sampleDropObject</event>
      <event name="beforeDrop">testFunctionDrop</event>

   </events>


   <!-- Player Configuration -->
   <player>

      <!-- configuration for the default player -->
      <default>

         <!-- configuration options related to the player's inventory -->
         <inventory>

            <!-- Determines the maximum weight of the inventory.  0 means the
                 inventory has unlimited size.  Any integer greater than 0
                 determines the inventory's maximum capacity (consider this the
                 sum total of all object weights.)  For example, if object
                 "candle" is defined with a weight of 2, and object "sword" is
                 defined with a weight of 10, and the inventory weight is
                 defined to be 11, you can then hold either the candle or the
                 sword, but not both.  What integers you choose to use are
                 totally up to you and are completely subjective. -->
            <weight>0</weight>

         </inventory>

         <!-- messages for various events are defined here (pre-defined for the
              engine or custom for scripts)
         -->
         <messages>
            <message name="respawn">A bolt of lightening claps, and your dead body bursts to life in a brilliant flash.</message>
         </messages>

         <!-- By default, player attributes are distributed evenly (10 given to
              each attribute.)  Here, you can optionally set your own values, which
              will be assigned by default to all new players. -->
         <attributes>
            <strength>10</strength>
            <dexterity>10</dexterity>
            <intelligence>10</intelligence>
         </attributes>

         <!-- settings governing player's ability to respawn when killed.  This
              section is optional, and if it doesn't exist, default behavior is
              for respawn to be disabled. Both players and creatures can have
              this section. -->
         <respawn>

            <!-- 0 = false and 1 = true.  If enabled, the player will come back
                 to life after being killed.  Default is 0 for false.  -->
            <enabled>1</enabled>

            <!-- Number of clock ticks (seconds) to wait before player respawns.
                 If set to 0, player will respawn immediately. (optional:
                 default = 0.) -->
            <interval>5</interval>

            <!-- Number of times the player can respawn before dying
                 permanently.  If set to -1, player can respawn an unlimited
                 number of times.  (optional: default = -1.) -->
            <lives>-1</lives>

         </respawn>

         <!-- a max health of 0 means the creature is immortal (optional:
              default is 0 for immortal) -->
         <maxHealth>10</maxHealth>

         <!-- default starting health (optional: default is value of maxHealth.)
         A value of 0 means the player starts out dead. If you really want to,
         you can set maxHealth = 0 and health to some value greater than 0 if
         you want to allow a situation where a health value gets decremented
         even though the player won't actually die. This could possibly be used
         to interesting effect. This will also work in creature definitions. -->
         <health>10</health>

         <!-- default maximum probability of being hit during combat
              (optional: default is 0.5) -->
         <woundrate>0.5</woundrate>

         <!-- this number, when multiplied by the player's strength factor
              (strength points / total attribute points) and rounded to the
              nearest whole number, represents the amount of damage the player
              does with his bare hands (optional: default is 3) -->
         <damagebarehands>5</damagebarehands>

      </default>

   </player>


   <!-- Game Objects -->
   <objects>

      <object name="candle">

         <!-- The user will see this description the first time they encounter the
              object, or everytime they issue the command "look at candle." -->
         <description>
It appears to be a firey cylinder of wax burning with the passion of a thousand suns.
         </description>

         <!-- specifies an object's weight; not specifying this will default to
              0, which means it has no weight. -->
         <weight>1</weight>

         <messages>
            <message name="take">The candle jumps into the air, does a backflip, and turns into a spoon.</message>
            <message name="drop">You hesitate before dropping that waxy goodness.</message>
         </messages>

         <!-- define object's event handlers and attached scripts here -->
         <events>
            <!-- one or more scripts can be attached to an object, which define
                 functions that get triggered by the event handler -->
            <script src="script/object/candle.lua"></script>

            <!-- Specific events that trigger functions in the script files
                 above. -->
            <event name="beforeTake">beforeTakeCandle</event>
            <event name="beforeDrop">beforeDropCandle</event>
         </events>

         <!-- If the object should be identifiable by words other than the name,
              define those words here. -->
         <aliases>
            <alias>fire</alias>
            <alias>flame</alias>
         </aliases>

         <!-- Arbitrary meta data can be set on individual entities, just like
              game meta data. This can be useful when you need to associate
              extra values with an object, perhaps for a script to make use of.
              The same section is also valid for rooms and creatures, and follows
              the same format. -->
         <meta>
            <somekey>This is a meta value assigned to key somekey</somekey>
         </meta>

      </object>

      <object name="rock">

         <description>
It's nothing special.  It's gray, bumpy and a little lopsided.
         </description>

         <!-- If the undroppable tag is set on an object, it means that a player
              or creature will not be able to drop it during gameplay -->
         <tags>
            <tag>undroppable</tag>
         </tags>

         <aliases>
            <alias>stone</alias>
         </aliases>

      </object>

      <object name="boulder">

         <description>
It's a huge rock.  You're not sure if you'll be able to lift it.
         </description>
         <weight>1</weight>

         <!-- If the untakeable tag is set on an object, then a player or
              creature will not be able to take it. -->
         <tags>
            <tag>untakeable</tag>
         </tags>

         <aliases>
            <alias>rock</alias>
            <alias>stone</alias>
         </aliases>

      </object>

      <!-- This object belongs to the weapon class, defined above -->
      <weapon name="sword">

         <!-- By default, an object's title is "a <object name>", and is shown
              whenever a player sees an object.  This title can be overridden
              with a <title> tag.  When a player sees the object, they will
              read "You see <object's title>. -->
         <title>the Sword of Hope</title>

         <description>
A smooth metallic sheen covers its surface, which looks to be of recent make and in good repair.
         </description>

         <short>You see the Sword of Hope, which bears an inscription.</short>

         <!-- Overrides default value of 1 in <weapon> class -->
         <damage>10</damage>

         <!-- Setting the "text" meta value will allow the player to read an object.
         In this case, "read sword" will print out this block of text. -->
         <meta>
            <text>The bearer of this sword must be an awesome adventurer!</text>
         </meta>

      </weapon>

      <!-- owned by Trogdor the Burninator -->
      <weapon name="stick">
         <description>It's long, narrow and definitely looks like a stick.</description>
         <weight>1</weight>
      </weapon>

   </objects>


   <!-- Creatures -->
   <creatures>

      <!-- NOTE: a respawn section can also go here if you want your creature
           to respawn.  This section is identical to the one in the default
           player configuration, so you would do well to look there for an
           example ;) -->
      <creature name="trogdor">

         <title>Trogdor the Burninator</title>

         <description>
            He stands 8 feet tall and breathes fire from his nostrils.
         </description>

         <!-- This makes the creature an enemy to all players in the game,
              indicating that it will attack if attacked (or if autoattack is
              enabled) -->
         <allegiance>enemy</allegiance>

         <!-- whether or not the creature will return each attack against it
              with one of its own.  (optional: default is 1 for true) -->
         <counterattack>1</counterattack>

         <!-- This section is completely optional.  If this section is present,
              and enabled is set to 1, then the creature will automatically
              attack players and other creatures when they enter the room.
              The default setting is for autoattack to be completely disabled. -->
         <autoattack>

            <!-- determines whether or not autoattack should be enabled for this
                 creature (default: 0 for false) -->
            <enabled>1</enabled>

            <!-- how many ticks of the clock (currently seconds) to wait before
                 the creature makes its first attack, and how many ticks of the
                 clock should pass between each attack.  (optional: default 5) -->
            <interval>3</interval>

            <!-- If set to 0 for false, then the creature will only attack once.
                 If set to 1 for true, then the creature will continue attacking
                 with interval number of clock ticks between (specified above)
                 until either one of the creatures or players is dead, or until
                 the two are no longer in the same room. (optional: default 0) -->
            <repeat>1</repeat>

         </autoattack>         

         <!-- creature's maximum probability of being hit during combat
              (optional: default is 0.5) -->
         <woundrate>0.35</woundrate>

         <!-- this number, when multiplied by the creature's strength factor
              (strength points / total attribute points) and rounded to the
              nearest whole number, represents the amount of damage the player
              does with his bare hands (optional: default is 3) -->
         <damagebarehands>10</damagebarehands>

         <!-- a max health of 0 means the creature is immortal (optional:
              default is 0 for immortal) -->
         <maxHealth>25</maxHealth>

         <!-- default starting health (optional: default is value of maxHealth.)
         A value of 0 means the creature starts out dead. -->
         <health>20</health>

         <!-- Creatures can also be given attributes that affect their behavior
              (by default, creatures are given an even spread of 10 points
              each.)  This setting is optional. -->
         <attributes>
            <strength>10</strength>
            <dexterity>10</dexterity>
            <intelligence>10</intelligence>
         </attributes>

         <inventory>

            <!-- Like the player configuration, a creature can have an inventory
                 of a predefined size. 0 means an inventory of unlimited size. -->
            <weight>0</weight>

            <!-- objects can be placed in a creature's inventory -->
            <object>stick</object>

         </inventory>

         <messages>
            <message name="descshort_dead">Trogdor is very much dead.</message>
            <message name="description_dead">The body of Trogdor lies crumbled on the floor, lifeless and very much dead, in the fullest sense.  This is a long and wordy description of Trogdor's body, isn't it!</message>
         </messages>

      </creature>


      <soul name="casper">

         <title>Casper the Friendly Ghost</title>

         <description>
He's white, transparent and floating six or seven feet off the ground.  He smiles and winks when you look up at him, clearly letting you know he means no harm.
         </description>

         <!-- Indicates that the creature is a friend to all players. Friends
              will not automatically retaliate when attacked, whereas creatures
              with an allegiance of neutral or enemy will. -->
         <allegiance>friend</allegiance>

         <!-- By default, players and creatures have the attackable tag set,
              meaning they can be attacked. This tag (and other defaults) can be
              removed, indicating that the creature cannot be attacked. -->
         <tags>
            <remove>attackable</remove>
         </tags>

         <!-- optional settings to configure a creature's ability to wander from
              room to room.  This is disabled by default. -->
         <wandering>

            <!-- Whether or not to enable wandering.  0 for false by default. -->
            <enabled>1</enabled>

            <!-- how many clock ticks should pass before the creature considers
                 wandering to another room.  Default is 10. Note that the
                 creature may or may not actually move.  This will be determined
                 by the next setting, wanderlust. -->
            <interval>10</interval>

            <!-- Wanderlust is the probability that a creature will actually
                 move when it considers wandering to another room.  This value
                 must be a valid probability between 0 (never moves) and 1
                 (always moves.)  Default is 0.5, which means the creature
                 should choose to actually move roughly half the time. -->
            <wanderlust>0.5</wanderlust>

         </wandering>

      </soul>


   </creatures>


   <!-- Rooms -->
   <rooms>

      <!-- every room MUST HAVE a UNIQUE name.  One room MUST have the name
           "start," which is where the player will start when the game begins.
       -->
      <room name="start">

         <!-- user will see the room's title above its description -->
         <title>The Palace</title>

         <!-- user will see the room's description when they enter -->
         <description>
You're standing in the middle of a sprawling white marble castle, the walls lined with portraits of long deceased ancestors of some forgotten king.  Servants are bustling about, rushing around with steaming plates of meats and cooked vegetables, rushing in and out of rooms to serve princes and heads of state. Legend has it that going sideways can transport you to a strange and mystical land.

To the north, you see a dark hole in the wall big enough to walk through.
         </description>

         <!-- names of the rooms "north" and "sideways" of this one -->
         <north>cave</north>
         <sideways>mysticalhall</sideways>

         <events>
            <script src="script/room/start.lua"></script>
            <event name="beforeObserve">beforeRoomSample</event>
         </events>

         <!-- you can define transition messages when you come to or go from
              specific directions (two possible messages for each direction) -->
         <messages>
            <!-- we're LEAVING this room by going north -->
            <message name="gonorth">Transitioning to the cave!</message>
            <!-- we're ENTERING this room by going south from another room -->
            <message name="entersouth">Back to start from the cave!</message>
            <message name="gosideways">The legends are true! You turn sideways and are consumed by light!</message>
         </messages>

         <!-- Creatures and objects that are contained inside a room should be
              referenced here. Note that the order in which they are placed will
              determine the order in which they are displayed. -->
         <contains>
            <!-- Note that an object cannot be in more than one room. -->
            <object>candle</object>
            <object>sword</object>
         </contains>

         <!-- One or more resources can be allocated to a room, creature, or
              object using the optional <resources> section. -->
         <resources>
            <!-- Resources can be allocated in whole number or floating point
            amounts. -->
            <resource name="coin">5</resource>
         </resources>

      </room>

      <room name="mysticalhall">

         <title>Mystical Hall</title>

         <description>
You find yourself in a mystical hall that seems to extend from one horizon to the next. The room is filled with clouds, and if you strain your ears carefully, you think you might hear the sound of an angelic choir.

You can't say for sure, but you suspect that going sideways will return you to the castle.
         </description>

         <sideways>start</sideways>

      </room>

      <room name="cave">

         <title>The Cave</title>

         <description>
You're in a dark musty cave.  You see a light some ways off to the south.  To the west, you spy a large dark chamber of some sort.
         </description>

         <!-- Since this room is north of "start," start is south of here.  You
              can specify one way movements by not placing this line here (maybe,
              for example, the user got shut behind a trap door?)
         -->
         <west>chamber</west>
         <south>start</south>

         <contains>
            <creature>casper</creature>
         </contains>

      </room>

      <room name="chamber">

         <title>Dark Chamber</title>

         <description>
You find yourself in a dark secluded chamber.  It's dank, musty and generally icky poo-pooos.  Be careful.  There may be nasty things waiting for you here!
         </description>

         <!-- The room's short description, which the player sees everytime
              they enter the room after the first time -->
         <short>It's dark.  Careful!</short>

         <east>cave</east>

         <contains>
            <creature>trogdor</creature>
            <object>rock</object>
            <object>boulder</object>
         </contains>

      </room>

   </rooms>


   <!-- Game Resources -->
   <resources>

      <!-- Resources are special kinds of entities that can be allocated in
           various amounts to players, creatures, and rooms in the game. One
           example of a resource might be a kind of in-game currency (in the
           example in this file, we'll use the name "coin") to illustrate that
           point.

           Like most other entities in the game, you can also set a title,
           short description, meta data, event handlers, and custom messages.

           Resource names should ordinarily be defined in the singular case. The
           plural attribute is optional; if it's missing, the enine will attempt
           to intuit the plural case automatically. -->
      <resource name="coin" plural="coins">

         <!-- If set to true (a value of 1), this will require all allocations
              of the resource to be made in integer increments only. For example,
              an entity can be assigned 10 of the resource, but not 10.5. By
              default, this is set to false (a value of 0), which allows numbers
              with fractional parts. Since this example is a discreet value
              (an integer number of coins), we'll set this to true. -->
         <integer>1</integer>

         <!-- If this setting is enabled, it determines how much of the resource
              is available to allocate to other entites in the game. Once this
              value has been reached, no more of the resource is available until
              an entity releases their amount. This value can be an integer
              (ex: 5) or a floating point value (ex: 10.5). By default, this
              setting is disabled.
         <amount>10</amount>
         -->

         <!-- If this setting is enabled, the value will set the maximum amount
              of the resource that can be held by a creature, player, or room.
              By default, this setting is disabled.
         <maxallocation>10</maxallocation>
         -->

         <!-- Like most other entities in the game, resources can have
              descriptions that the player will see when they look at the
              resource. The description the player gets to read will be the same
              whether they're looking at a plural or singular amount of the
              resource, but for resources, the following template parameters can
              be specified to alter the text depending on the case:

              {%title} -> singular or plural title ({%Title} for capitalized version)
              {%name} -> singular or plural name ({%Name} for capitalized version)
              {%a} or {%A} -> the appropriate indefinite article: "a" or "some"
              {%an} or {%An} -> the appropriate indefinite article: "an" or "some"
              {%it} or {%It} -> the appropriate pronoun: "it" or "they"
              {%its} or {%Its} -> the appropriate choice between "it's" and "they're"

              In the example below, the following descriptions would be shown to
              the user depending on if they're seeing it in the singular or the
              plural:

              "It's shiny and worth a LOT of money!" (singular)
              "They're shiny and worth a LOT of money!" (plural)

              The same parameters can be used in the <short> description tag. -->
         <description>
{%Its} shiny and worth a LOT of money!
         </description>

         <!-- Like other entities in the game, you can override how a resource is
              displayed to a player so that, instead of seeing its name, the
              player sees a more rich description. Unlike inherently singular
              entities like objects, however, resources can be shown either in
              the singular case or in the plural. If you don't specify a plural
              name, the engine will attempt to pluralize it for you. This is not,
              however, the case with titles, because the noun that needs to be
              pluralized could potentially fall somewhere other than at the end,
              making automatic pluralization impossible (at least for now).
              Instead, if you choose to override the name with a title, you
              pair that title with a plural version using the pluralTitle tag. -->
         <title>gold coin</title>
         <pluralTitle>gold coins</pluralTitle>

         <!-- Like with objects, setting the "text" meta value will allow the
         player to read a resource in their inventory or in the room they
         currently occupy. The engine currently does not distinguish between
         singular and plural instances of the resource, so any text you want the
         player to read should apply equally well to both cases.

         In this example, "read coin" or "read coins" will output this block of
         text. -->
         <meta>
            <text>Each coin is inscribed with the noble words, "In unicorns we trust."</text>
         </meta>

      </resource>

   </resources>


</game>
